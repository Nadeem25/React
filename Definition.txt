1. What is React?
Open source library for building User Interface.
--> Not Framework
--> Focus on UI
--> It has Component Base Architecture
--> It is declarative: Tell react what we want and it will build actual UI.


2. Component: It describe the part of the UI.
    1. Stateless Function Component: Javascript function which return HTML that describe UI.
    2. Stateful Class Component: Class extend Component Class and render method returns HTML.

3. Higher Order Component
We use Higher Order Component to share common functionality between component
HOC: Function takes component as an argument and returns a new call.
const newComponent = higherOrderComponent(originalComponetn)
Eg. const IronMan = withSuit(TonyStark)


4. render props: We use render props to share common functionaliy and props between components.

5. Context: It provides a way to pass data through the components tree without having to pass props down manually at entry level.
  step 1: Create Context
  step 2: Provide a context value
  step 3: Consume the context value

6. Rules Of Hook
--> Only call Hooks at the Top Level
Dont call Hooks inside loops, conditions or nested function

--> Only Call Hooks from React Functions
Call them from within React Functional Components and not just any regular javascript function

7. Summary of Hooks
1. The useState hook let us add state to functional component
2. In classes, the state is always an object, but with useState hook the state does not have to be an object
3. It return an array with 2 elements
4. 1st element is the current value of state and 2nd element is state setter function.

Types of Hooks
1. useState
2. UseEffect
3. UseContext
4. UseReducer
5. useMemo
6. useRef
7. useCallback


8. Re-render Scenario
  1. Render Phase
    step 1. Find all elements flagged for updates
    step 2. for each flagged component, convert JSX to react element and store the result
    step 3. Peform reconciliation- Differing the old and new tree of React element (a.k.a Virtual DOM)
  2. Commit Phase 
    stpe 1. Apply changes to the DOM

8.1. useState Hook
  Point 1: After the initial render(Value is 0) when will update the same value(Value is 0) then the component will not re-render.
  Point 2: After the component re-render(value from 0 to 5) if we set the same state  value(Value is 5) then component will re-render.
    If you again set the state value (value is 5) then component will not render.

8.2. useReduer Hook
  Point 1: After the initial render(Value is 0) when will update the same value(Value is 0) then the component will not re-render.
  Point 2: After the component re-render(value from 0 to 5) if we set the same state value(Value is 5) then component will re-render.
    If you again set the state value (value is 5) then component will not render.

8.3. State Immutability (Object useState Hook)
  Point 1: Mutating object or an array as state will not cause re-render when used with useState or useReducer hook
  Point 2: To re-render, make a copy of the existing state, modify as necessary and then pass the new state to the setter function or while returning from Reducer function.
  Point 3: Directly mutating is an easy way to create bug in application. 

8.4. Parent Child and Render
  Case 1: New State is different from old state
    Point 1: Both Parent and Child component re-render
  Case 2: New State is same as the Old State
    Point 1: After the initial render: After the initial render(Value is 0) when will update the same value(Value is 0) then the both Parent and Child component will not re-render.
    Point 2: After the re-render: After the component re-render (value change from 0 to 5), if we set the same value (value 5) then only Parent Component re-render on more time but not child component
    Point 3: Component will re-render when state will change. Component can change its state but not Props

8.5. React.Memo
  Point 1: In React, when Parents Comp renders , a child comp might unnecerssarily render. To optimize above behaviour, we can use React.Memo and pass in the child component.
    React.memo will perform a shallow comparison of the previous and new props and re-render the child component only if the props have changed.

  ============= Dont Do This ====================================
  Point 2: There is no need to wrap child component with React momo if child component itself has children component.
  Point 3: If parent component has object or function and wrapping one of its child component with React.memo (Passing object or function as props to child comp) so it is incorrect of memoization.
  



